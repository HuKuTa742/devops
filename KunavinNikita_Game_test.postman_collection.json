{
	"info": {
		"_postman_id": "7e17a777-09a5-479b-ad02-2e3af77f0a19",
		"name": "practice",
		"description": "This is a test for testing game on practicie",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ff37f18-938e-43a5-b674-8b308355b353",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c0e6b21-935e-4274-b44a-ad280a5296c1",
								"exec": [
									"pm.test(\"Status code is 201\",function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check role set to 1\", function() {\r",
									"  pm.expect(pm.response.json().role).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"login\",pm.response.json().login);\r",
									"pm.environment.set(\"id\",pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Login\": \"HuKuTaNEW\",\r\n  \"NativeName\": \"Nikita\",\r\n  \"Password\": \"0123456789q#\",\r\n  \"ConfirmPassword\": \"0123456789q#\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						},
						"description": "Try to create user in game "
					},
					"response": []
				},
				{
					"name": "Get user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231da224-be48-426f-b047-29db97e06647",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check access_token is string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).to.be.a('string');\r",
									"});\r",
									"\r",
									"var jsonResp = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"token\", jsonResp[\"access_token\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "0123456789q#",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info about me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "592cc20b-b841-4cf9-a2ae-eab9a59bd2db",
								"exec": [
									"pm.test(\"Status code is 200\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check login is string\", function() {\r",
									"  pm.expect(pm.response.json().login).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/me",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info about another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0750dc3-e940-474d-b837-a96a633bf979",
								"exec": [
									"pm.test(\"Status code is 200\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check name is string\", function() {\r",
									"  pm.expect(pm.response.json().nativeName).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/user/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e4a09ff-444a-467b-8c74-28f4c36ed1ac",
								"exec": [
									"pm.test(\"Status code is 200\",function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check new name is correct\", () => {\r",
									"  pm.expect(pm.response.json().nativeName).to.eql(JSON.parse(pm.request.body.raw).NativeName);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98c46a96-fcd4-4e0d-86b7-23123d33b927",
								"exec": [
									"pm.variables.set('newname','{{$randomWord}} {{$randomWord}}');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"NativeName\": \"Terminator\",\r\n  \"Role\": 0,\r\n  \"OldPassword\": \"0123456789q#\",\r\n  \"Password\": \"0123456789q#\",\r\n  \"ConfirmPassword\": \"0123456789q#\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Map",
			"item": [
				{
					"name": "Get all maps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "992aa3a2-d0e4-4c23-a508-f3392a8e271e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check all maps have width and height\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i].width).to.be.a('number');\r",
									"        pm.expect(jsonData[i].height).to.be.a('number');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Test response message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.not.eql(\"An error has occurred.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/map",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"map"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all maps (maps)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3651dc44-e3c0-4622-8113-3f9155c50745",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check all maps have width and height\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (i = 0; i < jsonData.length; i++) {\r",
									"        pm.expect(jsonData[i].width).to.be.a('number');\r",
									"        pm.expect(jsonData[i].height).to.be.a('number');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Test response message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.not.eql(\"An error has occurred.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/maps",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"maps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user maps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8439945e-e881-46a4-9cca-3d96082657ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response is array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.a('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/user/{{id}}/maps",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{id}}",
								"maps"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Game",
			"item": [
				{
					"name": "Create game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce8b3c78-8c38-45ec-9793-6b832b608702",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check id game is string\", function () {\r",
									"    pm.expect(pm.response.json().id).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.environment.set('gameid',pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Name\": \"NewHuKuTa\",\r\n  \"MapId\": \"ce808fae80274353bd85743ec4d21fc8\",\r\n  \"SwitchTimeout\": 0,\r\n  \"StartupTeamLives\": 0,\r\n  \"PoliceSpeed\": 0,\r\n  \"ThiefSpeed\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/game",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"game"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dafc407a-5e12-4b87-823c-88ac502df408",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check entities is array\", function () {\r",
									"    pm.expect(pm.response.json().entities).to.be.a('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/game?start=0&count=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"game"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "count",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40751ede-801d-438f-9f54-1353babdd6f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check entities is array\", function () {\r",
									"    pm.expect(pm.response.json().entities).to.be.a('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/games?start=0&count=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"games"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "count",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get game by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21c4c0d4-4239-4036-a91f-9f3721b5db4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check map cells is array\", function () {\r",
									"    pm.expect(pm.response.json().map.cells).to.be.a('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/game/{{gameid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"game",
								"{{gameid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b757f265-8473-4f6a-87c0-7b9bc6f56a19",
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/api/game/{{gameid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"game",
								"{{gameid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "47c0c075-fded-4c41-aacf-0eec8c2b2961",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0211fdaa-f3d1-455e-8f63-5bc28903881f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "88af4cf0-e87e-42fb-9aad-f42b9852e4d6",
			"key": "url",
			"value": "http://104.40.150.146/"
		}
	],
	"protocolProfileBehavior": {}
}